.\" Formater ce fichier par la commande :
.\" groff -man -Tlatin1 pdip.1  (si vous avez saisi des accents Iso-8859-1)
.\" groff -man -Tascii  pdip.1  (cas general )
.\"
.TH PDIP 1 "JUIN 2015" Linux "Commandes Utilisateur"
.SH NOM
pdip \- Dialogue programmé avec des processus intéractifs
.SH SYNOPSIS
.B pdip [ -s 
.I fichier-cmd
.B  ] [ -b 
.I taille-buffer
.B  ] [ -d
.I niveau
.B ] [ -h ] [ -V ] [ -e ] [ -t ] [ -o ] [ -p ] [ -R ]
.B --
.I commande
options paramètres...

.SH DESCRIPTION
.B pdip
est une version simplifiée de l'utilitaire
.BR expect (1).
L'acronyme PDIP lui-même vient des premières lignes du manuel de
.BR expect (1).
Comme
.BR expect (1),
il interprète un script de commandes pour dialoguer avec un programme intéractif comme le ferait
un opérateur humain. Mais il n'a pas toutes les possibilités de
.BR expect (1)
qui est capable d'intéragir avec plusieurs programmes en même temps, accepte un langage de commandes
de haut niveau offrant les branchements et des structures de contrôle ou de redonner
le contrôle à l'opérateur en cours de session.
.BR pdip (1)
accepte un langage très simple en entrée pour fournir des fonctions de base :
.RS
.TP 2
\(bu
Filtrage de la sortie du programme pour se caler sur une chaîne de caractères se conformant à un modèle (expression régulière)
.TP 2
\(bu
Envoi de chaînes de caractères au programme
.TP 2
\(bu
Arrêt des intéractions avec le programme pendant une durée donnée en secondes
.RE
.PP
La commande à lancer avec ses options et paramètres est specifiée à la fin de la ligne de commande. Si des options sont
passées à
.BR pdip (1)
et/ou à la commande, alors la commande doit être précédée d'un double tiret (--). Sinon
les options seront toutes transmises à
.BR pdip (1)
et entraîneront des erreurs.

.SH USAGE
.BR pdip (1)
lit
.I fichier-cmd
ou son entrée standard (défaut) et accepte les commandes suivantes:

.TP 6
.BI #...
# et les mots suivants jusqu'à la fin de la ligne sont ignorés (utilisé pour les commentaires)

.TP
.BI "dbg niveau"
Positionne le niveau du mode mise au point à
.BR "niveau".
Plus le
.B "niveau"
est grand, plus vous obtenez des traces. La valeur 0 désactive le mode mise au point.

.TP
.BI "timeout x"
Positionne à
.B x
secondes le temps maximum à attendre sur une commande
.BR "recv".
La valeur 0 désactive le temporisateur (comportement par défaut).

.TP
.BI "recv ""w1 w2..."""
Attend une ligne venant du programme se conformant au modèle
.B w1 w2...
Le modèle est une expression régulière se conformant à
.BR regex (7).

.TP
.BI "send ""w1 w2..."""
Envoie la chaîne de caractères
.B w1 w2...
au programme.

.TP
.BI "print ""w1 w2..."""
affiche la chaîne de caractères
.B w1 w2...
sur la sortie standard.

.PP
Les commandes
.B send
et
.B print
peuvent contenir des caractères de contrôle avec la notation "^caractère". Par exemple, "^C" signifie CONTROL C. Les raccourcis suivants sont aussi acceptés:
.nf
             \\a Cloche
             \\b Retour arrière
             \\t Tabulation horizontale
             \\n Retour à la ligne
             \\v Tabulation verticale
             \\f Saut de page
             \\r Retour chariot
             \\" Guillemet
             \\\\ Barre oblique inversée
             \\[ Echappement
             \\] Séparateur de groupe
             \\^ Caractère ^
.fi

.TP
.BI "sig signame"
Envoie le signal Linux
.B signame
au programme.
.B signame
peut prendre les valeurs : HUP, INT, QUIT, ILL, TRAP, ABRT, BUS, FPE, KILL, USR1, SEGV, USR2, PIPE, ALRM, TERM.

.TP
.BI "sleep x"
Arrête toute activité pendant
.B x
secondes

.TP
.BI exit
Termine PDIP

.TP
.BI "sh [-s] cmd par..."
Exécute la commande shell
.B "cmd par..."
(de manière synchrone si l'option
.B "[-s]"
est spécifiée.

.SH OPTIONS
.IP "-b taille-buffer | --bufsz=taille-buffer"
Taille en octet du buffer interne (défaut : 512).

.IP "-d | --debug"
Active le mode mise au point. C'est très utile pour comprendre pourquoi un script
ne marche pas comme souhaité. La valeur 0 désactive le mode mise au point.

.IP "-h | --help"
Affiche l'aide de la commande (sous-ensemble de cette page de manuel).

.IP "-s fichier-cmd | --script=fichier-cmd"
Script de commandes en entrée (défaut : stdin).

.IP "-V | --version"
Affiche la version du logiciel.

.IP "-e | --error"
Redirige la sortie erreur du programme contrôlé.

.IP "-t | --term"
.B pdip
se comporte en simple terminal en mode ligne.

.IP "-o | --outstand"
.B pdip
affiche les données en attente à la fin de la session.

.IP "-p | --propexit"
Propage le code de retour du programme contrôlé à
.BR "pdip".
Cela fait que
.B pdip
se termine avec le code du programme contrôlé (le code est 1 si le
programme contrôlé se termine sur un signal). Par défaut, le code de retour
de
.B pdip
est 0 quelque soit le code de retour du programme contrôlé a moins qu'il n'y
ait une erreur interne à
.BR "pdip".

.IP "-R | --backread"
Lit et stocke en interne les données en provenance du programme sous contrôle même s'il n'y a pas de commande 'recv' en cours. Cela évite de bloquer le programme sous contrôle sur un appel système 'write' suite à la saturation du tampon du pseudo-terminal interne quand
.B pdip
n'est pas en mode de réception de données (i.e. commande 'recv). Mais cela provoque de l'allocation de mémoire pour stocker les données.


.SH EXEMPLES
L'exemple suivant montre la mise en oeuvre d'une connexion telnet vers
un hôte appelé 'remote' sur le port 34570 avec le nom de login 'foo' et le mot de
passe 'bar'. Comme le numéro de port distant est specifié à l'aide d'une option (-p),
il faut faire précéder la commande d'un double tiret (--).
Les commandes sont injectées sur l'entrée standard. On
attend le prompt '$' et on lance la commande
.BR ls (1)
avant de se déconnecter du shell via la commande
.BR exit (P).
.PP
.nf
      $ pdip -- telnet -p 34570 remote
      recv "login"
      send "foo\\n"   # Nom de login 'foo'
      recv "Password"
      send "bar\\n"   # Mot de passe 'bar'
      recv "\\$ "     # Inhibition du caractère spécial '$' avec '\\'
      send "ls\\n"    # Lance la commande 'ls'
      recv "\\$ "
      send "exit\\n"  # Sortie du shell
      exit           # Sortie de PDIP
      $ 

.fi
L'exemple suivant montre la mise en oeuvre d'une connexion
.BR ftp (1)
vers un hôte appelé 'remote' avec le nom de login 'foo' et le
mot de passe 'bar'. Les commandes sont injectées sur l'entrée standard.
On attend l'apparition du prompt 'ftp>' en début de ligne et on lance la
commande 'help' avant de se déconnecter de
.BR ftp (1)
avec la commande 'quit'.
.PP
.nf
      $ pdip ftp remote
      recv "Name"
      send "foo\\n"    # Nom de login 'foo'
      recv "Password"
      send "bar\\n"    # Mot de passe 'bar'
      recv "^ftp> "   # Prompt en début de ligne
      send "help\\n"   # Lancement de la commande help
      recv "^ftp> "
      send "quit\\n"   # Sortie de FTP
      exit            # Sortie de PDIP
      $ 

.fi
L'exemple suivant met en oeuvre une session avec la calculatrice
.BR bc (1)
qui à la particularite de ne pas afficher de prompt en début de
ligne de commande. On utilise le meta caractere '$' pour se synchroniser
sur les fins de ligne. Deux opérations sont lancées '3+4' et '6*8'.
Ensuite on quitte
.BR bc (1).
.PP
.nf
      $ pdip bc
      recv "warranty"  # Vers la fin de la bannière de démarrage
      recv "$"         # Fin de la dernière ligne de la bannière
      send "3+4\\n"
      recv "$"         # Réception de la fin de ligne de l'écho
      recv "$"         # Réception de la fin de ligne du résultat
      send "6*8\\n"
      recv "$"
      recv "$"
      send "quit\\n"   # Sortie de BC
      exit            # Sortie de PDIP
      $ 

.fi

L'exemple suivant met en oeuvre une session
.BR telnet (1)
vers un hôte appelé 'remote' avec un nom de login 'foo' et un mot
de passe 'bar'. Les commandes sont injectées sur l'entrée standard.
Avec une expression régulière, on attend un prompt de la forme
"xxxx-<login_name>-pathname> " ou "xxxx-<login_name>-pathname>"
en début de ligne.
Ensuite la commande 'ls -l' est lancée avant de se déconnecter de
.BR telnet (1)
avec la commande 'exit'.
.PP
.nf
      $ pdip telnet remote
      recv "login:"
      send "foo\\n"                  # Nom de login 'foo'
      recv "Password:"
      send "bar\\n"                  # Mot de passe 'bar'
      recv "^(.)+-foo-(.)+(>|> )$"  # Prompt en début de ligne
      send "ls -l\\n"                # Lance la commande 'ls -l'
      recv "^(.)+-foo-(.)+(>|> )$"
      send "exit\\n"                 # Sortie de telnet
      exit                          # Sortie de PDIP
      $ 

.fi

.SH AUTEUR
Rachid Koucha (rachid point koucha a gmail point com)
.SH "VOIR AUSSI"
.BR regex (7),
.BR expect (1).
